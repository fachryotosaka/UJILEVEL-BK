<script>

let student_id = null;
let token   = $("meta[name='csrf-token']").attr("content");
let isCreateAction = true;

$('body').on('click', '#btn-add-vulnerability', function () {
    student_id = $(this).data('id');

    // Fetch vulnerability type with AJAX
    $.ajax({
        url: '/getVulnerabilityType',
        type: 'GET',
        cache: false,
        success: function(response) {

            var vulnerabilityTypes = response;

            // Get the container element where the checkboxes will be added
            var container = $('#checkbox-container');

            // Clear the container before adding checkboxes
            container.empty();

            // Iterate over the vulnerability types
            vulnerabilityTypes.forEach(function(vulnerabilityType) {
            // Create a checkbox element
            var checkbox = $('<input>').attr({
                type: 'checkbox',
                name: 'vulnerability_types[]',
                value: vulnerabilityType.id
            });

            // Create a label element for the checkbox
            var label = $('<label>').text(vulnerabilityType.name);

            // Append the checkbox and label elements to the container
            container.append(checkbox);
            container.append(label);
        });

        // Set the action flag to create
        isCreateAction = true;

        // Open modal
        $('#modal-vulnerability').modal('show');
        },
        error: function(xhr, status, error) {
            // Handle the error
            console.log(xhr.responseText);
        }
    });
});


$('body').on('click', '#btn-edit-vulnerability', function () {
    student_id = $(this).data('id');

    // Fetch vulnerability type with AJAX
    $.ajax({
        url: '/getVulnerabilityType',
        type: 'GET',
        cache: false,
        success: function(response) {

            var vulnerabilityTypes = response;

            // Get the container element where the checkboxes will be added
            var container = $('#checkbox-container');

            // Clear the container before adding checkboxes
            container.empty();

            // Fetch the student's existing vulnerabilities
            $.ajax({
                url: '/fetchStudentVulnerability',
                type: 'GET',
                data: { student_id: student_id },
                success: function(response) {

                    var studentVulnerabilities = response.vulnerabilities;

                    var studentVulnerabilityIds = studentVulnerabilities[0].vulnerability_type.split(',');

                    // Iterate over the vulnerability types
                    vulnerabilityTypes.forEach(function(vulnerabilityType) {
                        // Create a checkbox element
                        var checkbox = $('<input>').attr({
                            type: 'checkbox',
                            name: 'vulnerability_types[]',
                            value: vulnerabilityType.id
                        });
                        
                        // Check if the student has the current vulnerability type
                        var hasVulnerability = studentVulnerabilityIds.includes(vulnerabilityType.id.toString());
                        
                        // Set the checkbox status
                        checkbox.prop('checked', hasVulnerability);

                        // Create a label element for the checkbox
                        var label = $('<label>').text(vulnerabilityType.name);

                        // Append the checkbox and label elements to the container
                        container.append(checkbox);
                        container.append(label);
                    });

                    // Set the action flag to edit
                    isCreateAction = false;

                    // Open modal
                    $('#modal-vulnerability').modal('show');
                },
                error: function(xhr, status, error) {
                    // Handle the error
                    console.log(xhr.responseText);
                }
            });
        },
        error: function(xhr, status, error) {
            // Handle the error
            console.log(xhr.responseText);
        }
    });
});


// Save button event
    //action create student
$('#confirm').click(function(e) {
    e.preventDefault();

    // Get the selected checkboxes
    var selectedCheckboxes = $('input[name="vulnerability_types[]"]:checked');

    // Create an array to store the selected vulnerability type IDs
    var selectedVulnerabilityType = [];

    // Iterate over the selected checkboxes and extract the IDs
    selectedCheckboxes.each(function () {
        selectedVulnerabilityType.push($(this).val());
    });

    if (isCreateAction) {
        // Make an AJAX request to save the selected vulnerability types
        $.ajax({
            url: `/addVulnerability/${student_id}`,
            type: 'POST',
            data: {
                vulnerability_type: selectedVulnerabilityType,
                _token: token
            },
            success: function(response) {
                // Handle the success response
                var vulnerabilityData = response;
                var vulnerabilityTypeIds = response.vulnerability_type;

                // AJAX request to fetch vulnerability names
                $.ajax({
                    url: '/getVulnerabilityNames',
                    type: 'GET',
                    data: { vulnerabilityTypeIds: vulnerabilityTypeIds },
                    success: function(response) {
                        //show success message
                        Swal.fire({
                            icon: 'success',
                            title: `${vulnerabilityData.message}`,
                            showConfirmButton: false,
                            timer: 3000
                        });

                        //data post
                        let post = `
                            <tr id="index_${vulnerabilityData.student_id}">
                                <th scope="row">New</th>
                                <td>${vulnerabilityData.student_name}</td>
                                <td>${vulnerabilityData.classroom_name}</td>
                                <td>`;
                                    // Iterate over the vulnerability names
                                    response.names.forEach(function(name) {
                                        post += `${name} <br>`;
                                    });
                                    post += `
                                </td>
                                <td class="text-center">
                                    <a href="javascript:void(0)" id="btn-edit-vulnerability" data-id="${vulnerabilityData.student_id}" class="btn btn-primary btn-sm">Edit</a>
                                </td>
                            </tr>
                        `;
                        
                        //append to post data
                        $(`#index_${vulnerabilityData.student_id}`).replaceWith(post);
                    },
                    error: function(xhr, status, error) {
                        // Handle the error
                        console.log(xhr.responseText);
                    }
                });
                // Hide modal
                $('#modal-vulnerability').modal('hide');
            },
            error: function(xhr, status, error) {
                // Handle the error
                console.log(xhr.responseText);
            }
        });
    } 
    else {
        // Make an AJAX request to save the selected vulnerability types
        $.ajax({
            url: `/editVulnerability/${student_id}`,
            type: 'POST',
            data: {
                vulnerability_type: selectedVulnerabilityType,
                _token: token
            },
            success: function(response) {
                // Handle the success response
                var vulnerabilityData = response;
                var vulnerabilityTypeIds = response.vulnerability_type;

                // AJAX request to fetch vulnerability names
                $.ajax({
                    url: '/getVulnerabilityNames',
                    type: 'GET',
                    data: { vulnerabilityTypeIds: vulnerabilityTypeIds },
                    success: function(response) {
                        //show success message
                        Swal.fire({
                            icon: 'success',
                            title: `${vulnerabilityData.message}`,
                            showConfirmButton: false,
                            timer: 3000
                        });

                        //data post
                        let post = `
                            <tr id="index_${vulnerabilityData.student_id}">
                                <th scope="row">New</th>
                                <td>${vulnerabilityData.student_name}</td>
                                <td>${vulnerabilityData.classroom_name}</td>
                                <td>`;
                                    // Iterate over the vulnerability names
                                    response.names.forEach(function(name) {
                                        post += `${name} <br>`;
                                    });
                                    post += `
                                </td>
                                <td class="text-center">
                                    <a href="javascript:void(0)" id="btn-edit-vulnerability" data-id="${vulnerabilityData.student_id}" class="btn btn-primary btn-sm">Edit</a>
                                </td>
                            </tr>
                        `;
                        
                        //append to post data
                        $(`#index_${vulnerabilityData.student_id}`).replaceWith(post);
                    },
                    error: function(xhr, status, error) {
                        // Handle the error
                        console.log(xhr.responseText);
                    }
                });

                // Hide modal
                $('#modal-vulnerability').modal('hide');
            },
            error: function(xhr, status, error) {
                // Handle the error
                console.log(xhr.responseText);
            }
        });
    }


});
</script>