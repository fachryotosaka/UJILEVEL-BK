<?php

namespace App\Http\Controllers;

use App\Models\Classroom;
use App\Models\User;
use Illuminate\Http\Request;
use App\Models\Vulnerability;
use App\Models\VulnerabilityType;
use Illuminate\Support\Facades\Auth;

class VulnerabilityController extends Controller
{
    public function index()
    {
        $users = null;
        if(Auth::user()->role === 'teacher' || Auth::user()->role === 'classroom_teacher'){
            $users = User::with('vulnerabilities')->where('role', 'student')
                ->where('classroom_id', Auth::user()->classroom_id)
                ->paginate(10);
        }

        if (!is_null($users)) {
            foreach ($users as $user) {
                $vulnerabilityData = [];
            
                foreach ($user->vulnerabilities as $vulnerability) {
                    $vulnerabilityData[] = $vulnerability->vulnerability_type;
                }
            
                $vulnerabilityTypeIds = collect($vulnerabilityData)
                    ->flatMap(function ($vulnerability) {
                        return explode(',', $vulnerability);
                    })
                    ->map(function ($vulnerabilityTypeId) {
                        return intval($vulnerabilityTypeId);
                    })
                    ->toArray();
            
                $vulnerabilityNames = VulnerabilityType::whereIn('id', $vulnerabilityTypeIds)
                    ->pluck('name')
                    ->toArray();
                    
                $user->vulnerability_name = $vulnerabilityNames;
            }
        }
        
        return view('dashboard.shared.Vulnerability Table.vulnerabilityT', compact('users'));
    }

    public function getVulnerabilityNames(Request $request)
    {
        $vulnerabilityTypeIds = explode(',', $request->input('vulnerabilityTypeIds'));
        
        $vulnerabilityNames = VulnerabilityType::whereIn('id', $vulnerabilityTypeIds)
            ->pluck('name')
            ->toArray();
        
        return response()->json(['names' => $vulnerabilityNames]);
    }


    function addVulnerability(Request $request, $id) {
        // Validate the request data
        $request->validate([
            'vulnerability_type' => 'required|array',
            'vulnerability_type.*' => 'exists:vulnerability_types,id',
        ]);

        $vulnerabilityTypeIds = $request->input('vulnerability_type');

        // Get the student
        $student = User::findOrFail($id);
        $classroomName = Classroom::where('id', $student->classroom_id)->pluck('name');

        // Convert the vulnerability type IDs to a comma-separated string
        $vulnerabilityTypeIdsString = implode(',', $vulnerabilityTypeIds);

        // Create a new vulnerability record and associate it with the student
        $vulnerability = new Vulnerability();
        $vulnerability->vulnerability_type = $vulnerabilityTypeIdsString;
        $vulnerability->save();

        // Attach the student to the vulnerability using the pivot table
        $vulnerability->students()->attach($vulnerability, ['student_id' => $student->id, 'vulnerability_id' => $vulnerability->id]);

        // Alternatively, you can use the sync method to replace the existing student associations
        // $vulnerability->students()->sync($vulnerability, ['student_id' => $student->id, 'vulnerability_id' => $vulnerability->id]);

        // Return a response indicating success
        return response()->json([
            'message' => 'Vulnerability types saved successfully',
            'vulnerability_type' => $vulnerability->vulnerability_type,
            'student_id' => $student->id,
            'student_name' => $student->name,
            'classroom_name' => $classroomName[0]
        ]);
    }

    function editVulnerability(Request $request, $id) {
        // Validate the request data
        $request->validate([
            'vulnerability_type' => 'required|array',
            'vulnerability_type.*' => 'exists:vulnerability_types,id',
        ]);

        $vulnerabilityTypeIds = $request->input('vulnerability_type');

        // Get the student
        $student = User::with('vulnerabilities')->findOrFail($id);
        $classroomName = Classroom::where('id', $student->classroom_id)->pluck('name');
        $vulnerability = Vulnerability::findOrFail($student->vulnerabilities[0]->id);
        
        // Convert the vulnerability type IDs to a comma-separated string
        $vulnerabilityTypeIdsString = implode(',', $vulnerabilityTypeIds);

        // Create a new vulnerability record and associate it with the student
        $vulnerability->vulnerability_type = $vulnerabilityTypeIdsString;
        $vulnerability->save();

        // Return a response indicating success
        return response()->json([
            'message' => 'Vulnerability types saved successfully',
            'vulnerability_type' => $vulnerability->vulnerability_type,
            'student_id' => $student->id,
            'student_name' => $student->name,
            'classroom_name' => $classroomName[0]
        ]);
    }

    public function fetchStudentVulnerability(Request $request)
    {
        $studentId = $request->input('student_id');

        // Fetch the student's existing vulnerabilities
        $student = User::findOrFail($studentId);
        $vulnerabilities = $student->vulnerabilities;

        // Return the vulnerabilities as a JSON response
        return response()->json([
            'vulnerabilities' => $vulnerabilities
        ]);
    }
}
